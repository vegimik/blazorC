@using System.Reflection
@typeparam TItem

@if (memberInfo != null && memberInfo.Length > 0)
{
	<table class="@($"table {this.CssClass}")">
		<thead>
			<tr>
				@foreach (var memberInfoItem in memberInfo)
				{
					@if (memberInfoItem.MemberType == MemberTypes.Property &&
							!ColumnsToExcludeCSV.Contains(memberInfoItem.Name, StringComparison.OrdinalIgnoreCase))
					{
						<th>@memberInfoItem.Name</th>
					}
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Items)
			{
				<tr>
					@foreach (var memberInfoItem in memberInfo)
					{
						@if (memberInfoItem.MemberType == MemberTypes.Property &&
								!ColumnsToExcludeCSV.Contains(memberInfoItem.Name, StringComparison.OrdinalIgnoreCase))
						{
							<td>@item.GetType().GetProperty(@memberInfoItem.Name).GetValue(item)</td>
						}
					}
				</tr>
			}
		</tbody>
	</table>

}


@code {

	[Parameter]
	public List<TItem> Items { get; set; }

	[Parameter]
	public string ColumnsToExcludeCSV { get; set; }
	[Parameter]
	public string CssClass { get; set; }

	MemberInfo[] memberInfo;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Items != null && Items.Count > 0)
		{
			Type typeOfItem = this.Items[0].GetType();
			memberInfo = typeOfItem.GetMembers();

		}
	}


}
