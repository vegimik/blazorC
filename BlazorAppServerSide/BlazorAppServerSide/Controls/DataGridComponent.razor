@typeparam TItem
<h3>DataGridComponent</h3>


<table class="table is-fullwidth">
	<thead>
		<tr>
			@if (Columns == null || Columns.Count <= 0)
			{
				//Create the header with reflection
			}
			else
			{
				//Create the header based on clomun definition
				@foreach (var column in Columns)
				{

					@if (column.Alignment != Alignment.NotSet)
					{
						@switch (column.Alignment)
						{
							case Alignment.Left:
								<th class="align-left" @onclick="()=> SortData(column)">
									@column.Caption
									<span style="float:right" class="@(SortClass(column))"></span>
								</th>
								break;
							case Alignment.Center:
								<th class="align-center" @onclick="()=> SortData(column)">
									@column.Caption
									<span style="float:right" class="@(SortClass(column))"></span>
								</th>
								break;
							case Alignment.Right:
								<th class="align-right" @onclick="()=> SortData(column)">
									@column.Caption
									<span style="float:right" class="@(SortClass(column))"></span>
								</th>
								break;
							default:
								<th @onclick="()=> SortData(column)">
									@column.Caption
									<span style="float:right" class="@(SortClass(column))"></span>
								</th>
								break;
						}
					}
					else
					{
						<th @onclick="()=> SortData(column)">
							@column.Caption
							<span style="float:right" class="@(SortClass(column))"></span>
						</th>
					}

				}
			}
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Items.Skip(this.Paging.NumberOFItemsToSkip(CurrentPageNumber)).Take(Paging.NumberOfItemsToTake(Items.Count)))
		{
			<tr>
				@foreach (var column in Columns)
				{
					@if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
					{
						string value = string.Empty;
						switch (column.DataType)
						{
							case DataType.Date:
							case DataType.DateTime:
								value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
								break;
							case DataType.Boolean:
								value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
								break;
							case DataType.Currency:
								value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
								break;
							default:
								break;

						}

						@if (column.Alignment != Alignment.NotSet)
						{

							<td align="@column.Alignment.ToString().ToLower()"> @value</td>
						}
						else
						{
							<td>@value</td>
						}

					}
					else
					{
						@if (column.Alignment != Alignment.NotSet)
						{

							<td align="@column.Alignment.ToString().ToLower()"> @typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
						}
						else
						{
							<td> @typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
						}
						@*<td> @item.GetType().GetProperty(column.DataField).GetValue(item,null )</td>*@
					}
				}
			</tr>

		}
	</tbody>
</table>

<div class="level">
	<div class="level-left">
		<p>Totola items: @Items.Count, Page: @CurrentPageNumber</p>
	</div>
	<div class="level-right">
		<div class="level-item">
			@if (Paging != null && Paging.Enabled)
			{
				@if (Paging.CustomPager)
				{
					@CustomPager
				}
				else
				{
					<span style="font-size:14px" @onclick="GoToPrevPage"><b>&lt; Previous</b></span>
					<span style="font-size:12px; color:grey">
						&nbsp;>&nbsp; Page:
						@CurrentPageNumber
						of
						@Paging.MaxPageNumber(Items.Count)
					</span>
					<span style="font-size:14px" @onclick="GoToNextPage"><b>&gt; Next</b></span>
				}

			}
		</div>
	</div>
</div>

@code {

	[Parameter]
	public int CurrentPageNumber { get; set; } = 0;

	[Parameter]
	public List<TItem> Items { get; set; }

	[Parameter]
	public List<ColumnDefinition> Columns { get; set; }

	[Parameter]
	public PagingConfig Paging { get; set; }

	[Parameter]
	public RenderFragment CustomPager { get; set; }



	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		SortData();



	}

	public void GoToPrevPage()
	{
		this.CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
		this.StateHasChanged();
	}
	public void GoToNextPage()
	{
		this.CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, Items.Count);
		this.StateHasChanged();
	}

	public int MaxPageNumber { get => Paging.MaxPageNumber(Items.Count); }

	private string SortClass(ColumnDefinition column)
	{
		if (column.SortDirection != SortDirection.NotSet)
		{
			return $"sort {column.SortDirection.ToString().ToLower()}";

		}
		return "no-sort";
	}

	private void SortData(ColumnDefinition sortByColumn = null)
	{
		bool initial = (sortByColumn == null);
		if (sortByColumn == null)
		{
			sortByColumn = Columns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
			if (sortByColumn == null)
				return;
		}
		@foreach (var column in Columns)
		{
			if (column.DataField != sortByColumn.DataField)
				column.SortDirection = SortDirection.NotSet;
		}

		if (!initial)
			switch (sortByColumn.SortDirection)
			{
				case SortDirection.NotSet:
					sortByColumn.SortDirection = SortDirection.Asc;
					break;
				case SortDirection.Asc:
					sortByColumn.SortDirection = SortDirection.Desc;
					break;
				case SortDirection.Desc:
					sortByColumn.SortDirection = SortDirection.Asc;
					break;
				default:
					sortByColumn.SortDirection = SortDirection.Asc;
					break;
			}
		if (sortByColumn.SortDirection == SortDirection.Asc)
		{
			Items.Sort((a, b) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(a).ToString().CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(b).ToString()));
		}
		else
		{
			Items.Sort((a, b) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(b).ToString().CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(a).ToString()));
		}
	}
}
