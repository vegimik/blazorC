@using System.Timers
@*@page "/counter"*@




<h1>Counter</h1>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />

<p>Current count: @currentCount</p>

<CascadingValue Name="Counter" Value="@currentCount">
	<CascadingValue Name="TitileColor" Value="@("blue")" IsFixed="true">
		<Component1></Component1>
	</CascadingValue>
</CascadingValue>

<br />
<hr />
<h3>Child</h3>
<button class="button" @onclick="()=>{
Child.ShowChild();
}">
	Show Child Component
</button>
<ChildComponent @ref="Child"> </ChildComponent>
<br />
<br />

<p>Dialog Component</p>
<button class="button" @onclick="()=>{
dialog.Show();
}">
	Show Dialog Component
</button>
<DialogComponent @ref="dialog"></DialogComponent>

<br />
<Component Counter="currentCount" @ref="component">
	<BodyTemplate>
		<button @onclick="(ClickBody)">Click in BodyTemplate</button>
	</BodyTemplate>
</Component>


@code {

	public ChildComponent Child { get; set; }
	public DialogComponent dialog { get; set; }
	public Component component { get; set; }

	[Parameter]
	public EventCallback<int> SetCurrentCount { get; set; }

	[Parameter]
	public Action<int> SetCount { get; set; }

	private int currentCount = 0;
	public Timer timer { get; set; }

	private void IncrementCount()
	{
		currentCount++;
		//SetCurrentCount.InvokeAsync(currentCount);
		SetCount.Invoke(currentCount);
		component.Counter = currentCount;
		//component.Refresh();

	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		this.timer = new Timer(2000);
		timer.Elapsed += OnTimedEvent;
		timer.Enabled = true;
	}

	public void OnTimedEvent(object source, ElapsedEventArgs e)
	{
		this.IncrementCount();
		Console.WriteLine($"Counter value: {this.currentCount}");


	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		Console.WriteLine($"Counter - OnAfterRender at {DateTime.Now.ToString("hh:MM:ss.fff")}");
	}

	private void ClickBody()
	{

	}







}
